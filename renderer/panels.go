package main

import (
	"github.com/josephbudd/cwt/domain/interfaces/caller"
	"github.com/josephbudd/cwt/domain/types"
	"github.com/josephbudd/cwt/renderer/interfaces/panelHelper"
	"github.com/josephbudd/cwt/renderer/notjs"
	"github.com/josephbudd/cwt/renderer/panels/CopyButton/CopyNotReadyPanel"
	"github.com/josephbudd/cwt/renderer/panels/CopyButton/CopyReadyPanel/PracticeTab/CopyPracticePanel"
	"github.com/josephbudd/cwt/renderer/panels/CopyButton/CopyReadyPanel/TestTab/CopyTestPanel"
	"github.com/josephbudd/cwt/renderer/panels/CopyButton/CopyReadyPanel/WPMTab/CopyWPMPanel"
	"github.com/josephbudd/cwt/renderer/panels/KeyButton/KeyNotReadyPanel"
	"github.com/josephbudd/cwt/renderer/panels/KeyButton/KeyReadyPanel/PracticeTab/KeyPracticePanel"
	"github.com/josephbudd/cwt/renderer/panels/KeyButton/KeyReadyPanel/TestTab/KeyTestPanel"
	"github.com/josephbudd/cwt/renderer/panels/KeyButton/KeyReadyPanel/WPMTab/KeyWPMPanel"
	"github.com/josephbudd/cwt/renderer/panels/ReferenceButton/SelectCodesPanel/LettersTab/LettersPanel"
	"github.com/josephbudd/cwt/renderer/panels/ReferenceButton/SelectCodesPanel/NumbersTab/NumbersPanel"
	"github.com/josephbudd/cwt/renderer/panels/ReferenceButton/SelectCodesPanel/PunctuationTab/PunctuationPanel"
	"github.com/josephbudd/cwt/renderer/panels/ReferenceButton/SelectCodesPanel/SpecialTab/SpecialPanel"
	"github.com/josephbudd/cwt/renderer/viewtools"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

func doPanels(quitCh chan struct{}, tools *viewtools.Tools, callMap map[types.CallID]caller.Renderer, notJS *notjs.NotJS, helper panelHelper.Helper) (err error) {
	// 1. Construct the panel code.
	var copyNotReadyPanel *copynotreadypanel.Panel
	if copyNotReadyPanel, err = copynotreadypanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var copyPracticePanel *copypracticepanel.Panel
	if copyPracticePanel, err = copypracticepanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var copyTestPanel *copytestpanel.Panel
	if copyTestPanel, err = copytestpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var copyWPMPanel *copywpmpanel.Panel
	if copyWPMPanel, err = copywpmpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var keyNotReadyPanel *keynotreadypanel.Panel
	if keyNotReadyPanel, err = keynotreadypanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var keyPracticePanel *keypracticepanel.Panel
	if keyPracticePanel, err = keypracticepanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var keyTestPanel *keytestpanel.Panel
	if keyTestPanel, err = keytestpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var keyWPMPanel *keywpmpanel.Panel
	if keyWPMPanel, err = keywpmpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var lettersPanel *letterspanel.Panel
	if lettersPanel, err = letterspanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var numbersPanel *numberspanel.Panel
	if numbersPanel, err = numberspanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var punctuationPanel *punctuationpanel.Panel
	if punctuationPanel, err = punctuationpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var specialPanel *specialpanel.Panel
	if specialPanel, err = specialpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}

	// 2. Size the app.
	tools.SizeApp()

	// 3. Start each panel's initial calls.
	copyNotReadyPanel.InitialCalls()
	copyPracticePanel.InitialCalls()
	copyTestPanel.InitialCalls()
	copyWPMPanel.InitialCalls()
	keyNotReadyPanel.InitialCalls()
	keyPracticePanel.InitialCalls()
	keyTestPanel.InitialCalls()
	keyWPMPanel.InitialCalls()
	lettersPanel.InitialCalls()
	numbersPanel.InitialCalls()
	punctuationPanel.InitialCalls()
	specialPanel.InitialCalls()

	return
}
