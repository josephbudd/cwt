package dispatch

import (
	"log"

	"github.com/josephbudd/cwt/domain/lpc/message"
	"github.com/josephbudd/cwt/domain/store"
	"github.com/josephbudd/cwt/mainprocess/lpc"
)

/*
	DO NOT EDIT THIS FILE.

	USE THE TOOL kicklpc TO ADD OR REMOVE LPC Messages.

	kicklpc will edit this file for you.

*/

// Do dispatches local process communications messages received from the renderer.
// They are dispatched to the main process handlers here in package dispatch.
// You are required to code the functionality into those handlers.
func Do(cargo interface{}, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores) {
	switch cargo := cargo.(type) {
	case *message.LogRendererToMainProcess:
		// Log does not need a lpc.EOJer because it does not have a go routine.
		handleLog(cargo, sending)
	case *message.CheckCopyRendererToMainProcess:
		handleCheckCopy(cargo, sending, eojing, stores)
	case *message.CheckKeyRendererToMainProcess:
		handleCheckKey(cargo, sending, eojing, stores)
	case *message.GetCopyWPMRendererToMainProcess:
		handleGetCopyWPM(cargo, sending, eojing, stores)
	case *message.GetKeyCodesRendererToMainProcess:
		handleGetKeyCodes(cargo, sending, eojing, stores)
	case *message.GetKeyWPMRendererToMainProcess:
		handleGetKeyWPM(cargo, sending, eojing, stores)
	case *message.GetTextToCopyRendererToMainProcess:
		handleGetTextToCopy(cargo, sending, eojing, stores)
	case *message.GetTextToKeyRendererToMainProcess:
		handleGetTextToKey(cargo, sending, eojing, stores)
	case *message.KeyRendererToMainProcess:
		handleKey(cargo, sending, eojing, stores)
	case *message.MetronomeRendererToMainProcess:
		handleMetronome(cargo, sending, eojing, stores)
	case *message.UpdateCopyWPMRendererToMainProcess:
		handleUpdateCopyWPM(cargo, sending, eojing, stores)
	case *message.UpdateKeyCodeRendererToMainProcess:
		handleUpdateKeyCode(cargo, sending, eojing, stores)
	case *message.UpdateKeyWPMRendererToMainProcess:
		handleUpdateKeyWPM(cargo, sending, eojing, stores)
	default:
		log.Println("dispatch Do: unknown cargo type.")
	}
}
