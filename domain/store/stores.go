package store

import (
	"fmt"
	"strings"

	"github.com/josephbudd/cwt/domain/store/storing"
)

/*
	DO NOT EDIT THIS FILE.

	USE THE TOOL kickstore TO ADD OR REMOVE STORES.

	kickstore WILL EDIT THIS FILE FOR YOU.
*/

/*
	Package main's func buildStores() will build a pointer to a type Stores.
	It will eventually end up being passed to your lpc message handlers
	  so that they can use the stores.
*/

// Stores is each of the application's storers.
type Stores struct {
	// Local bolt stores.
	KeyCode *storing.KeyCodeLocalBoltStore
	WPM     *storing.WPMLocalBoltStore
}

// Open opens every store.
// It returns all of the errors as one single error.
func (stores *Stores) Open() (err error) {

	errList := make([]string, 0, 2)
	defer func() {
		if len(errList) > 0 {
			err = fmt.Errorf(strings.Join(errList, "\n"))
		}
	}()

	// Local bolt stores.
	if err = stores.KeyCode.Open(); err != nil {
		errList = append(errList, err.Error())
	} else {
		stores.WPM.DB = stores.KeyCode.DB
	}

	return
}

// Close closes every store.
// It returns all of the errors as one single error.
func (stores *Stores) Close() (err error) {

	errList := make([]string, 0, 2)
	defer func() {
		if len(errList) > 0 {
			err = fmt.Errorf(strings.Join(errList, "\n"))
		}
	}()

	if err = stores.KeyCode.Close(); err != nil {
		errList = append(errList, err.Error())
	}

	return
}
