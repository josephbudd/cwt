// +build js, wasm

package framework

import (
	"fmt"
	"log"


	"github.com/josephbudd/cwt/rendererprocess/framework/lpc"
	"github.com/josephbudd/cwt/rendererprocess/framework/viewtools"
	"github.com/josephbudd/cwt/rendererprocess/paneling"
	copynotreadypanel "github.com/josephbudd/cwt/rendererprocess/panels/CopyButton/CopyNotReadyPanel"
	copypracticepanel "github.com/josephbudd/cwt/rendererprocess/panels/CopyButton/CopyReadyPanel/CopyPracticeTab/CopyPracticePanel"
	copytestpanel "github.com/josephbudd/cwt/rendererprocess/panels/CopyButton/CopyReadyPanel/CopyTestTab/CopyTestPanel"
	copywpmpanel "github.com/josephbudd/cwt/rendererprocess/panels/CopyButton/CopyReadyPanel/CopyWPMTab/CopyWPMPanel"
	keynotreadypanel "github.com/josephbudd/cwt/rendererprocess/panels/KeyButton/KeyNotReadyPanel"
	keypracticepanel "github.com/josephbudd/cwt/rendererprocess/panels/KeyButton/KeyReadyPanel/KeyPracticeTab/KeyPracticePanel"
	keytestpanel "github.com/josephbudd/cwt/rendererprocess/panels/KeyButton/KeyReadyPanel/KeyTestTab/KeyTestPanel"
	keywpmpanel "github.com/josephbudd/cwt/rendererprocess/panels/KeyButton/KeyReadyPanel/KeyWPMTab/KeyWPMPanel"
	letterspanel "github.com/josephbudd/cwt/rendererprocess/panels/ReferenceButton/SelectCodesPanel/LettersTab/LettersPanel"
	numberspanel "github.com/josephbudd/cwt/rendererprocess/panels/ReferenceButton/SelectCodesPanel/NumbersTab/NumbersPanel"
	punctuationpanel "github.com/josephbudd/cwt/rendererprocess/panels/ReferenceButton/SelectCodesPanel/PunctuationTab/PunctuationPanel"
	specialpanel "github.com/josephbudd/cwt/rendererprocess/panels/ReferenceButton/SelectCodesPanel/SpecialTab/SpecialPanel"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

// DoPanels builds and runs the panels.
func DoPanels(quitChan, eojChan chan struct{}, receiveChan lpc.Receiving, sendChan lpc.Sending,
	help *paneling.Help) (err error) {
	
	defer func() {
		if err != nil {
			err = fmt.Errorf("DoPanels: %w", err)
			log.Println("Error: " + err.Error())
		}
	}()

	// 1. Prepare the spawn panels.

	// 2. Construct the panel code.
	var copyNotReadyPanel *copynotreadypanel.Panel
	if copyNotReadyPanel, err = copynotreadypanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var copyPracticePanel *copypracticepanel.Panel
	if copyPracticePanel, err = copypracticepanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var copyTestPanel *copytestpanel.Panel
	if copyTestPanel, err = copytestpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var copyWPMPanel *copywpmpanel.Panel
	if copyWPMPanel, err = copywpmpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var keyNotReadyPanel *keynotreadypanel.Panel
	if keyNotReadyPanel, err = keynotreadypanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var keyPracticePanel *keypracticepanel.Panel
	if keyPracticePanel, err = keypracticepanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var keyTestPanel *keytestpanel.Panel
	if keyTestPanel, err = keytestpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var keyWPMPanel *keywpmpanel.Panel
	if keyWPMPanel, err = keywpmpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var lettersPanel *letterspanel.Panel
	if lettersPanel, err = letterspanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var numbersPanel *numberspanel.Panel
	if numbersPanel, err = numberspanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var punctuationPanel *punctuationpanel.Panel
	if punctuationPanel, err = punctuationpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}
	var specialPanel *specialpanel.Panel
	if specialPanel, err = specialpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}

	// 3. Size the app.
	viewtools.SizeApp()

	// 4. Start each panel's message and event dispatchers.
	copyNotReadyPanel.StartDispatchers()
	copyPracticePanel.StartDispatchers()
	copyTestPanel.StartDispatchers()
	copyWPMPanel.StartDispatchers()
	keyNotReadyPanel.StartDispatchers()
	keyPracticePanel.StartDispatchers()
	keyTestPanel.StartDispatchers()
	keyWPMPanel.StartDispatchers()
	lettersPanel.StartDispatchers()
	numbersPanel.StartDispatchers()
	punctuationPanel.StartDispatchers()
	specialPanel.StartDispatchers()

	// 5. Start each panel's initial calls.
	copyNotReadyPanel.InitialJobs()
	copyPracticePanel.InitialJobs()
	copyTestPanel.InitialJobs()
	copyWPMPanel.InitialJobs()
	keyNotReadyPanel.InitialJobs()
	keyPracticePanel.InitialJobs()
	keyTestPanel.InitialJobs()
	keyWPMPanel.InitialJobs()
	lettersPanel.InitialJobs()
	numbersPanel.InitialJobs()
	punctuationPanel.InitialJobs()
	specialPanel.InitialJobs()

	return
}
